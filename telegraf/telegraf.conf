# Telegraf Configuration


# Global tags can be specified here in key="value" format.
[global_tags]


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "15s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "15s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log file name, the empty string means to log to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = "rpi3-loft"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true



# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  # The full HTTP or UDP URL for your InfluxDB instance.
  #
  # Multiple URLs can be specified for a single cluster, only ONE of the
  # urls will be written to each interval.
  urls = ["http://influxdb.lan:8086"]

  # The target database for metrics; will be created as needed.
  # For UDP url endpoint database needs to be configured on server side.
  database = "sensors"

  # The value of this tag will be used to determine the database.  If this
  # tag is not set the 'database' option is used as the default.
  database_tag = ""

  # If true, the database tag will not be added to the metric.
  exclude_database_tag = false

  # If true, no CREATE DATABASE queries will be sent.  Set to true when using
  # Telegraf with a user without permissions to create databases or when the
  # database already exists.
  skip_database_creation = false

  # Name of existing retention policy to write to.  Empty string writes to
  # the default retention policy.  Only takes effect when using HTTP.
  retention_policy = ""

  # Write consistency (clusters only), can be: "any", "one", "quorum", "all".
  # Only takes effect when using HTTP.
  write_consistency = "any"

  # Timeout for HTTP messages.
  timeout = "5s"


# Print telegraf metrics on stdout
# [[outputs.file]]
#   files = ["stdout"]
#   data_format = "influx"



# Map enum values according to given table.
[[processors.enum]]
  [[processors.enum.mapping]]
    ## Name of the field to map
    # field = "status"

    ## Name of the tag to map
    tag = "sensor_id"

    ## Destination tag or field to be used for the mapped value.  By default the
    ## source tag or field is used, overwriting the original value.
    dest = "location"

    ## Default value to be used for all values not contained in the mapping
    ## table.  When unset, the unmodified value for the field will be used if no
    ## match is found.
    # default = 0

    ## Table of mappings
    [processors.enum.mapping.value_mappings]
      00275a000003 = "loft"
      011913ebe7f8 = "outside"
      0114327ac80b = "office"
      0516825c38ff = "living-room"
      0114327a93a9 = "kitchen"
      0316820cc3ff = "shed"



[[inputs.exec]]
  commands = [
    "/sensors.py"
  ]
  timeout = "5s"
  data_format = "influx"
